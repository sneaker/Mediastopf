MediaStopf
Software Engeneering 2 Projekt

Projektplan

Marco Birchler
marco.birchler@hsr.ch

Thomas Kallenberg
thomas.kallenberg@hsr.ch

Martin Schwab
martin.schwab@hsr.ch

David Tran
david.tran@hsr.ch

HSR Hochschule für Technik Rapperswil
www.hsr.ch
Studiengang Informatik
www.i.hsr.ch


25. Februar 2009

Dokumentinformationen
Änderungsgeschichte
Datum
Version
Änderung
Autor

22.2.09
0.1
Erstellung
Thomas Kallenberg

23.2.09
0.2
Let’s start… (RED =TODO)
David Tran

24.2.09
0.3
Added more Information all over the place
Thomas Kallenberg


Einführung
Zweck
  Dieses Dokument beschreibt den Projektplan für das Projekt MediaStopf.

Gültigkeitsbereich
  Dieses Dokument gilt als Grundlage für das ganze Projekt MediaStopf und hat Gültigkeit über die gesamte Projektdauer.

Definitionen und Abkürzungen
	DAL	Data Abstrac Layer	Wie sieht die Datenstruktur aus welche die Informatinen beinhaltet
	git	Revision Control System

Referenzen

  Martin Fowler – Refactoring
  Gang of Four – Design Patterns
  Craig Larman – Uml and Applied Patterns
  Steve Eckel – Thinking in Java

Übersicht
	Die Folgenden Kaptiel geben Aufschluss über das Projekt Mediastopf. Im anschliessenden Kapitel geht es um Ziele und Zweck des Projektes. Wichtige Punkte sind Kapitel 5 Risikomanagement und Kapitel 6 Arbeitspakete, welche das Projekt in einzelne Arbeitschritte unterteilt. Qualitätsmassnahmen und Infrastruktur sind im letzten Teil dieses Dokumentes zu finden.

Projekt Übersicht
   MediaStopf ist eine Client Server Applikation welche es erlaubt Medien automatisiert zu erfassen. In einem ersten Schritt wird MediaStopf für Audiodateien welche von CD's gelesen werden optimiert. Grundsätzlich sollte das Programm aber so generell wie möglich gehalten werden um zusätzliche Medienformate zu unterstützen. Das Programm bindet eine externe Auftragsdatenbank ein. Diese Datenbank hat enthält Informationen über den Status des Auftrags.

Ziele

Hauptziele:
  Erlernte Theorien in SE1 und SE2 praktisch anwenden.
  Selbsteinschätzung bei Teamarbeit, Kompromisse eingehen, Erfahrungen für die Zukunft sammeln.
  Vertiefung in Netzwerkprogrammierung und Implementierung von Client/Server Anwendungen.
  Besseres Zeitgefühl für Planung und Implementierung.

Zweck
  Automatisierung eines Medieneinlesesystems für Bilder, Musik und Videos. Die Idee des Projektes kommt von der Firma Brocit, welche in diesem Umfeld tätig ist. Eines der Teammitglieder arbeitet bei dieser Firma. Bei Brocit sind bereits viele Arbeitsschritte automatisiert. Mediastopf soll weitere bis an hin zeitaufwändige Schritte automatisieren. Das Projekt beinhaltet interessante Technologien, in welchen sich die Teammitglieder vertiefen wollen.
  Annahmen und Einschränkungen
  Von jedem Projektmitglied wird eine Arbeitszeit von acht Stunden in der Woche erwartet und bei unerwarteten Problemen auf max. 10 Stunden erhöht werden. Das Projekt ist erweiterungsfähig, so dass die verlangte Projektzeit ohne weiteres eingehalten werden kann.
  Sollte ein Projektmitglied länger Abwesend sein müssen, wird dies in der Projektplanung berücksichtigt und im Team diskutiert.

Projektorganisation
  Das Team besteht aus vier Studenten, jedes Mitglied hat eigene spezielle Aufgaben.

Organisationsstruktur
  Marco Birchler: Idea, Brain and Leader of this project. 
  Thomas Kallenberg: Leader Network programming
  Martin Schwab: Network programming, Overall Coder
  David Tran: GUI programming, Overall Coder
  
Externe Schnittstellen
  Projektbetreuer ist Prof. Hans Rudin.

Management Abläufe

Projekt Kostenvoranschlag
  Projektzeit: 16.2.09 – 29.5.09
  Abgabetermin: 29.5.09
  Erwartete Arbeitszeit insgesamt: 120h (~8h pro Woche)

Projektplan
Zeitplan 
  Siehe hierzu das Dokument Dokumentation/Projektplan.xls
Iterationsplanung / Meilensteine

MS1. Projektplan: Review Projektplan mit Zeitplan und aktuellen Iterationsplänen SW03

MS2. Anforderungen und Analyse: Review der Anforderungsspezifikation und der Domainanalyse SW03-SW06

MS3. Ende Elaboration: Zwischenpräsentation mit Demo eines Architekturprototypen, Review SW06-SW08

MS4. Architektur/ Design: Review von Architektur/ Design und Architekturdoku SW11

MS5. Schlusspräsentation/-abgabe: Präsentation und Demo der Software SW14 (29.5.09 1700)

Besprechungen
Inception		Projektantrag			SW01/ SW02
Elaboration 1	Projektplan				SW02

Abgabe (Releases)
<Beschreibung verschiedener Releases. Was ist alles realisiert? Wann sind die Realeases fertig? Typ (Prototyp, Beta, Finalversion) des Releases?>

Risiko Management (Rist Management)
<Tabelle mit Risiken oder auf separates Dokument verweisen (beinhaltet Risiken, Massnahmen, etc…)>
<Begründungen zur Tabelle. Werden Reserven / Rückstellungen eingeplant? Wieso und wie viel>

Quelle: Tabellentitel kopiert aus Projekt ScrabbIT.
TODO: Sortieren nach gewichtetem Schaden.

Risiko-ID	Titel		Beschreibung	maximaler Schaden in h	Eintrittswahrscheinlichkeit	gewichteter Schaden	Massnahmen			Vorgehen bei Eintreffen

R01		Versionskontrolle	Fehlerhafte Manipulation von GIT erfordern zeitaufwendige Restores.	15h	10%	1%	Regelmässige, kleine Commits verhindern grössere Konflikte.

R02		Hardware-Fehler	Hardware des Servers/eines Teammitgliedes oder Laptop-Diebstahl.	10h	5%	1%	Ersatz-Hardware steht zur Verfügung.	Ausweichen auf HSR-Infrastruktur (SVN, Workstations)

R03		HSR-Testumgebung	HSR-Computer lassen aus technischen Gründen keine Tests zu (Netzwerk-Pakete geblockt, Fehlende Benutzerrechte für Installationen oder HW-Zugriff)	10h	5%	2%	System portabel halten, damit Tests auch auf eigenen Laptops funktionieren.	Testing und Demos auf eigenen Laptops mit Hilfe eines Hubs.

R04		Java-Limits	Features nicht implementierbar mit Java oder zu komplex (z.B. HW-Zugriff, Netzwerk)	20h	10%	2%	HW-Zugriff möglichst auf Drittsysteme auslagern.	Separate Dienstprogramme laufen lassen, Resultate abholen.

R05		Vorkenntnisse	Ungenügende Kenntnisse aus dem letzten Semester verlangsamen oder verunmöglichen Projektmanagement.	150h	20%	20%	Schwerpunkt auf Startphase legen, für gute Grundlage.	Projekt abbrechen und Vorlesung erneut belegen nächstes Semester.

R06		Lizenzrecht	Verletzung des Lizenzrechtes der Urheber durch das geplante Vorgehen.	2h	2%	1%	Erhaltung der Generizität, damit statt Musik auf Dia-/Bildimport gewechselt werden kann.	System nur für Schulzwecke verwenden.

R06		Angst vor Ende	Teammitglied fürchtet Scheitern des Projektes und steigt aus.	120h	15%	15%	Regelmässige Meetings. Voller Einsatz in der Startphase, damit Unsicherheiten vermindert werden. Sehr klare Definition eines Minimalsystemes.	Skalierung des Projektes.

R07		Krankheit	Teammitglied fällt aus unvorhersehbaren Gründen für den Rest der Projektzeit aus.	120h	2%	15%	Skalierung des Projektes.


Arbeitspakete

<Nummer, Wie heisst das Arbeitspaket?, Was beinhaltet es?, Wer ist dafür Zuständig / Verantwortlich? , Wie viel Zeit wird dafür benötigt? , Gibt es Abhängigkeiten zu anderen Arbeitspaketen?, Gibt es spezielle Risiken oder Probleme, die man beachten muss?>

projektplan 	Schreiben des Projektplans 					* 	möglichst Vollständig
vision		Schreiben der Vision vom Mediastopf				marco	übereinstimmung mit Projektplan
dal		Analyse und Design des DAL					*	mögliche änderungen später
uc_brief	Liste mit UC							*	-
10uc_full	10 % of the most important Use Cases fully dressed		*	richtiger ablauf?
domainmodels	Erstellung der Domainmodelle					*	-
ssd		Erstellung Systemsequence Diagramme				*	-
nfr		Nicht funktionale Anforderungen spezifizieren			*	-
unit		Unit Test Schreiben						*	Korrekt?
impl_dal	Data Abstract Layer entwerfen					?	Richtige Vererbung? überhaupt vererbung?
impl_client	Client implementieren						?	-
client_gui	Client Gui entwerfen						david	-
prot_client	Prototyp des Clients zusammenfügen				david	-
stability	Stabilität des Programms testen					?	-
speed		Geschwindigkeit des Programms testen				?	-
optimisation	Optimierung anhand der Ergebnisse von 12 und 13			?	-
3rd_apps	Ansteuerung der Drittprogramme					?	möglich?
30uc_full	30 % der Use Cases were written fully dressed			?	-
design_net	Netzwerkdesing erstellen					thomas	?
impl_net	Netzwerkarchitektur implementieren				thomas	? 
impl_server	Server Implementieren						?	?
gui_server	Gui für den Server erstellen					david	?
prot_server	Prototyp für den Server zusammenbauen				david	?
70uc_full	70% aller Use Cases in fully dressed geschrieben		thomas	?
database	Datenbankanbindung realisieren					marco	?
p2p		Server lookup with p2p						thomas	extension
imdb		Implementieren der imdb Abfrage					?	?
cover		Coversuche im Internet (Google?)				?	rechtlich ok?
filter		Bildfilter programmieren					?	extension
100uc_full	100% der Use Cases geschrieben					?	?
customer_inst	Installation beim Kunden					?	?
customer_test	Test beim Kunden						*	?
customer_meet	Schlussbesprechung des Kunden					?	?
presentation	Schlusspresentation						*	?

Infrastruktur (Infrastructure)

Räumlichkeiten
  Arbeiten und Sitzungen an der HSR

Hardware
  Arbeiten mit privaten Laptops
  Versionsverwaltung und Trac Serverbetrieb von Thomas Kallenberg (www.no-more-secrets.ch)

Software

Betriebssystem:
  Microsoft Windows XP SP3
  Microsoft Windows Vista SP1
  Diverse Linuxdistributionen (Ubuntu, Debian, Arch)

Programmiersprache:
  Java 6

Entwicklungsumgebung:
  Eclipse 3.4 (Ganymede)
  JUnit 4
  Ant

Versionsverwaltungssoftware:
  Git

Dokumentation:
  Microsoft Office 2007
  OpenOffice
  Trac

Backups
  Das Projekt befindet sich in einem Revision Control System. Jeder Entwickler hat zudem eine aktuelle kopie auf seinem Computer. Zudem wird das Projekt im SCM vom Server nächtlich auf eine seperate Festplatte gesichert.

Kommunikationmittel
  E-Mail
  Mobile
  IM (Skype, MSN, ICQ)
  Wiki (http://www.no-more-secrets.ch/trac/wiki)
  Trac (http://www.no-more-secrets.ch/trac/)

Qualitätsmassnahmen

8.1.Besprechungsprotokolle
  Bei den mehrmals wöchentlichen Besprechungen wird Protokoll geführt. Da ein Teammitglied nicht immer bei allen dabei sein kann, muss dieses zwingend geführt werden. Diese Protokolle werden so schnell wie möglich auf das Wiki hochgeladen.
8.2.Codequalität
8.2.1 Codequalität im Revision Control
	Der Master Tree im Revision Control System muss immer compilieren und sollte keinen ungetesteten und nicht funktionsfähigen Code enthalten.
	Die einzelnen Teammitglieder haben seperate Trees welche sie mit einander austauschen und davon neuen Code erhalten können. Zudem läuft ein Ant Server der mehrmals täglich das Projekt im master tree compiliert und den Status per Email an die Mailinglist sendet falls es Fehler gibt. Am Ende jeder Woche sollten alle Trees der Teammitglieder dem des Master Tree entsprechen.
8.2.2 Codequalität allgemein
	Nicht nur im Revision Control System sollte der Code gut sein. TODO:more 
8.3.Tests
	An kritischen Stellen sollte nach dem Test-Driven-Development gearbeitet werden. Besonders während der ersten Entwicklungsphasen soll nach Möglichkeit nach diesem Modell entwickelt werden. Zudem werden an kritischen und hoch veränderlichen Teilen Unit Test eingeführt um korrekte Ergebnisse zu garantieren.
	Zudem werden Systemtests durchgeführt um allfällige Fehler aufzuspüren.
	Da eines unserer Teammitglieder auch Kunde ist werden Ergebnisse von Usability Tests sehr schnell ihre Wege in das Programm finden.
8.4.Code Review
  Zu jeder Besprechung sucht sich ein Teammitglied einen Codeteil eines anderen aus, den er persöhnlich schlecht findet. Natürlich anhand von den erlernten Codesmells nach Martin Fowler und lässt sich darüber aufklären warum der Code so geschrieben wurde. Das Team soll dann darüber beraten wie der Code verbessert werden kann. Somit steigt die Motivation sauberen Code zu schreiben. Im Dokument Codingstyle.doc sind spezielle Styles vermerkt welche vereinbart worden sind.
8.6.Sonstiges Review
  Alles was an die Betreuer oder sonst per mail an Aussenstehende geht wird von mindestens einem anderen Teammitglied durchgelesen. Wenn er dies akzeptiert wird jede Mail mit cc an die Projekt MaillingList geschrieben.
8.5.Dokumentation
	8.5.1 Dokumentation des Codes
		Die Dokumentation des Codes erfolgt über Javadoc. Daraus können später weitere Dokumentationen einfach erstellt werden. Dadurch können auch allfällige Fragen bei der Verwendung von Funktionen beantwortet werden.
	8.5.2 Dokumentation allgemein
		Für Allgemeine Dokumentationen wird die folgende Technik angewandt. Die Dokumentation wird in Text Dateien geschrieben und bei bedarf von einer Person in ein Word Dokument umgewandelt und Formatiert. Dies gibt uns die Möglichkeit auch an der Dokumentation parallel mit dem Revision Control System zu arbeiten und Änderungen einfacher zu integrieren.
